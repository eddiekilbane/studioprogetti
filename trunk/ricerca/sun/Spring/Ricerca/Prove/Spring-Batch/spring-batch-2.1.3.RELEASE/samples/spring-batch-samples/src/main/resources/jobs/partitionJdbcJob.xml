<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<job id="partitionJdbcJob" xmlns="http://www.springframework.org/schema/batch">
		<step id="step">
			<partition step="step1" partitioner="partitioner">
				<handler grid-size="2" task-executor="taskExecutor"/>
			</partition>
		</step>
	</job>

	<bean id="partitioner" class="org.springframework.batch.sample.common.ColumnRangePartitioner">
		<property name="dataSource" ref="dataSource" />
		<property name="table" value="CUSTOMER" />
		<property name="column" value="ID" />
	</bean>

	<bean id="taskExecutor" class="org.springframework.core.task.SyncTaskExecutor" />
	
	<step id="step1" xmlns="http://www.springframework.org/schema/batch">
		<tasklet>
			<chunk writer="itemWriter" reader="itemReader" processor="itemProcessor" commit-interval="5" />
			<listeners>
				<listener ref="fileNameListener" />
			</listeners>
		</tasklet>
	</step>

	<bean id="fileNameListener" class="org.springframework.batch.sample.common.OutputFileListener" scope="step">
		<property name="path" value="file:./target/output/jdbc/" />
	</bean>

	<bean id="itemReader" scope="step" autowire-candidate="false" parent="itemReaderParent">
		<property name="sql">
			<value>
                <![CDATA[
                    select ID,NAME,CREDIT from CUSTOMER where ID >= ? and ID <= ?
                ]]>
			</value>
		</property>
		<property name="preparedStatementSetter">
			<bean class="org.springframework.batch.core.resource.ListPreparedStatementSetter">
				<property name="parameters">
					<list>
						<value>#{stepExecutionContext[minValue]}</value>
						<value>#{stepExecutionContext[maxValue]}</value>
					</list>
				</property>
			</bean>

		</property>
	</bean>

	<bean id="outputTestReader" class="org.springframework.batch.item.file.MultiResourceItemReader" scope="prototype">
		<property name="resources" value="file:target/output/jdbc/*.csv" />
		<property name="delegate" ref="testItemReader" />
	</bean>

	<bean id="testItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value="," />
						<property name="names" value="id,name,credit" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="targetType" value="org.springframework.batch.sample.domain.trade.CustomerCredit" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="inputTestReader" parent="itemReaderParent">
		<property name="sql">
			<value>
                <![CDATA[
                    select ID,NAME,CREDIT from CUSTOMER
                ]]>
			</value>
		</property>
	</bean>

	<bean id="itemReaderParent" class="org.springframework.batch.item.database.JdbcCursorItemReader" abstract="true">
		<property name="dataSource" ref="dataSource" />
		<property name="rowMapper">
			<bean class="org.springframework.batch.sample.domain.trade.internal.CustomerCreditRowMapper" />
		</property>
	</bean>

	<bean id="itemProcessor" class="org.springframework.batch.sample.domain.trade.internal.CustomerCreditIncreaseProcessor" />

	<bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
		<property name="resource" value="#{stepExecutionContext[outputFile]}" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="id,name,credit" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

</beans>
